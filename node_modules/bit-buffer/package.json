{
  "_args": [
    [
      "bit-buffer",
      "C:\\DevelopmentSSD\\rocketleague_analyzer"
    ]
  ],
  "_from": "bit-buffer@*",
  "_id": "bit-buffer@0.0.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/bit-buffer",
  "_npmUser": {
    "email": "inolen@gmail.com",
    "name": "inolen"
  },
  "_npmVersion": "1.2.30",
  "_phantomChildren": {},
  "_requested": {
    "name": "bit-buffer",
    "raw": "bit-buffer",
    "rawSpec": "",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/bit-buffer/-/bit-buffer-0.0.3.tgz",
  "_shasum": "416c0fc72e5d2fbb4f0ecc3db9f00bfad320c436",
  "_shrinkwrap": null,
  "_spec": "bit-buffer",
  "_where": "C:\\DevelopmentSSD\\rocketleague_analyzer",
  "author": {
    "name": "Anthony Pesch"
  },
  "bugs": {
    "url": "https://github.com/inolen/bit-buffer/issues"
  },
  "dependencies": {},
  "description": "Bit-level reads and writes for ArrayBuffers",
  "devDependencies": {},
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "416c0fc72e5d2fbb4f0ecc3db9f00bfad320c436",
    "tarball": "http://registry.npmjs.org/bit-buffer/-/bit-buffer-0.0.3.tgz"
  },
  "gitHead": "cd4417237bed1f22dd5adfd8a6b961ea7234d9c9",
  "homepage": "https://github.com/inolen/bit-buffer#readme",
  "keywords": [
    "arraybuffer",
    "bit",
    "bits",
    "dataview"
  ],
  "license": "MIT",
  "main": "bit-buffer.js",
  "maintainers": [
    {
      "name": "inolen",
      "email": "inolen@gmail.com"
    }
  ],
  "name": "bit-buffer",
  "optionalDependencies": {},
  "readme": "# BitBuffer\n\nBitBuffer provides two objects, `BitView` and `BitStream`. `BitView` is a wrapper for ArrayBuffers, similar to JavaScript's [DataView](https://developer.mozilla.org/en-US/docs/JavaScript/Typed_arrays/DataView), but with support for bit-level reads and writes. `BitStream` is a wrapper for a `BitView` used to help maintain your current buffer position, as well as to provide higher-level read / write operations such as for ASCII strings.\n\n\n## BitView\n\n### Attributes\n\n```javascript\nbb.buffer  // Underlying ArrayBuffer.\n```\n\n### Methods\n\n#### BitView(buffer, optional byteOffset, optional byteLength)\n\nDefault constructor, takes in a single argument of an ArrayBuffer. Optional are the `byteOffset` and `byteLength` arguments to offset and truncate the view's representation of the buffer.\n\n### getBits(offset, bits, signed)\n\nReads `bits` number of bits starting at `offset`, twiddling the bits appropriately to return a proper 32-bit signed or unsigned value. NOTE: While JavaScript numbers are 64-bit floating-point values, we don't bother with anything other than the first 32 bits.\n\n### getInt8, getUint8, getInt16, getUint16, getInt32, getUint32(offset)\n\nShortcuts for getBits, setting the correct `bits` / `signed` values.\n\n### getFloat32(offset)\n\nGets 32 bits from `offset`, and coerces and returns as a proper float32 value.\n\n### getFloat64(offset)\n\nGets 64 bits from `offset`, and coerces and returns as a proper float64 value.\n\n### setBits(offset, value, bits)\n\nSets `bits` number of bits at `offset`.\n\n### setInt8, setUint8, setInt16, setUint16, setInt32, setUint32(offset)\n\nShortcuts for setBits, setting the correct `bits` count.\n\n### setFloat32(offset)\n\nCoerces a float32 to uint32 and sets at `offset`.\n\n### setFloat64(offset)\n\nCoerces a float64 to two uint32s and sets at `offset`.\n\n\n## BitStream\n\n### Attributes\n\n```javascript\nbb.byteIndex  // Get current index in bytes.\nbb.byteIndex = 0;  // Set current index in bytes.\n```\n\n```javascript\nbb.view  // Underlying BitView\n```\n\n### Methods\n\n#### BitStream(view)\n\nDefault constructor, takes in a single argument of a BitView.\n\n#### BitSteam(buffer, optional byteOffset, optional byteLength)\n\nShortcut constructor that initializes a new `BitView(buffer, byteOffset, byteLength)` for the stream to use.\n\n#### readBits(bits, signed)\n\nReturns `bits` numbers of bits from the view at the current index, updating the index.\n\n#### writeBits(value, bits)\n\nSets `bits` numbers of bits from `value` in the view at the current index, updating the index.\n\n#### readASCIIString(optional bytes)\n\nReads bytes from the underlying view at the current index until either `bytes` count is reached or a 0x00 terminator is reached.\n\n#### writeASCIIString(string, optional bytes)\n\nWrites a string followed by a NULL character to the underlying view starting at the current index. If the string is longer than `bytes` it will be truncated, and if it is shorter 0x00 will be written in its place.\n\n\n## license\n\nMIT",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/inolen/bit-buffer.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.0.3"
}
